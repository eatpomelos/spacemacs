* emacsday5
** 关于一些常用的优化
- 解决打单引号出现两个的问题，这在emacs-mode中是比较烦的
#+BEGIN_SRC emacs-lisp
(sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
#+END_SRC

- 让光标在语句中间的时候也可以高亮最外层的括号
#+BEGIN_SRC emacs-lisp

(define-advice show-paren-function (:around (fn) fix-show-paren-function)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))

#+END_SRC
-- define-advice类似于C语言的宏。
-- 上面的(save-excursion)是保存光标和插入点，当执行的函数结束后，再次回到这里的时候，恢复
-- 之前保存的光标和插入点

** 优化页面设计开发效率
#+BEGIN_SRC emacs-lisp
;;隐藏HTML界面的^M
(defun hidden-dos-eol ()
  "Do not show ^M in files containing mixed UNIX nad DOS line ending."
(interactive)
(setq buffer-display-table (make-display-table))
(aset buffer-display-table ?\^M []))

;;移除HTML界面的^M
(defun remove-dos-eol ()
  "Replace DOS eolns CR with Unix eolns CR"
(interactive)
(goto-char (point-min))
(while (search-forward "\r" nil t) (replace-match "")))
#+END_SRC

*** web-mode
- 下面是为了在进行html设计的时候，能够通过快捷键更换缩进的空格数，在2和4之间进行切换
#+BEGIN_SRC emacs-lisp
(defun my-web-mode-indent-setup ()
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)
)

(add-hook 'web-mode-hook 'my-web-mode-indent-setup)

(defun my-toggle-web-indent ()
(interactive)
;;web development
(if (or (eq major-mode 'js-mode) (eq major-mode 'js2-mode))
(progn
(setq js-indent-level (if (= js-indent-level 2) 4 2))
(setq js2-basic-offset (if (= js2-basic-offset 2) 4 2))))

(if (eq major-mode 'web-mode)
(progn 
(setq web-mode-markup-indent-offset (if (= web-mode-markup-indent-offset 2) 4 2))
(setq web-mode-css-indent-offset (if (= web-mode-css-indent-offset 2) 4 2))
(setq web-mode-code-indent-offset (if (= web-mode-code-indent-offset 2) 4 2))))

(if (eq major-mode 'css-mode)
(setq css-indent-offset (if (= css-indent-offset 2) 4 2)))

(setq indent-tabs-mode nil))

(global-set-key (kbd "C-c t i") 'my-toggle-web-indent)
#+END_SRC

*** js2-refactor
- 具体的功能还不是很熟悉，以后使用的时候看看笔记来熟悉
-在进行js代码编写的时候，可以增加效率
#+BEGIN_SRC emacs-lisp
;;config for js2-refactor
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-m")
#+END_SRC

提供了很多重构的功能，在以后使用的时候，根据文档来使用
C-c C-m ef将选中的代码封装成一个函数
C-c C-m mf将选中的代码封装成一个类

** occur and imenu
*** occur
- 在进行查找的时候，将当前选中的区域当作是默认查找的字符串
#+BEGIN_SRC emacs-lisp
;;dwim = do what i mean.
(defun occur-dwim ()
  "Call 'occur' with a sane default"
  (interactive)
  (push (if (region-active-p)
	    (buffer-substring-no-properties
	     (region-beginning)
	     (region-end))
	     (let ((sym (thing-at-point 'symbol)))
	       (when (stringp sym))))
	  regexp-history)
  (call-interactively 'occur))

(global-set-key (kbd "M-s o") 'occur-dwim)
#+END_SRC

*** imenu
- 将当前缓冲区的函数列出来，可以进行跳转
- 有一段很长的关于正则表达式的代码，由于暂时可能不会用到 ，所以没有抄录，具体代码见视频50：
  57.

- expand-region
- 能够更加方便地选中一些区域，按C-=能够进行选中区域的扩充，同理C--(ctrl加'-'可以进行选中区
  域的缩减)

*** iedit-mdoe
- 选中某一个词语，可以进行批量编辑，默认的快捷键是:"C-;"
*** org-mode
** 导出org-mode的文件
- C-c C-e 导出 
